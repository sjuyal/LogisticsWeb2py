# -*- coding: utf-8 -*-
# this file is released under public domain and you can use without limitations

#########################################################################
## This is a sample controller
## - index is the default action of any application
## - user is required for authentication and authorization
## - download is for downloading files uploaded in the db (does streaming)
## - call exposes all registered services (none by default)
#########################################################################

def index():
    """
    example action using the internationalization operator T and flash
    rendered by views/default/index.html or views/generic.html

    if you need a simple wiki simply replace the two lines below with:
    return auth.wiki()
    """
    response.flash = T("Welcome!! :D")
    return dict(message=T('Please proceed following these instructions!!!!'))

def home():
    """
    example action using the internationalization operator T and flash
    rendered by views/default/index.html or views/generic.html

    if you need a simple wiki simply replace the two lines below with:
    return auth.wiki()
    """
    if auth.user:
        return dict(message=T('Select the menu above'))
    else:
        redirect(URL('index'))


def new_entry():
    if auth.user:
        message=""
        form = SQLFORM(db.product_info, fields=["id","product_name","company_name","receiver_name","receiver_email","expected_arrival_date","address","destination_place"])
        
        if form.process().accepted:
            x=form.vars.id;
            db(db.product_info.id == x).update(source_place=auth.user.place)
            db(db.product_info.id == x).update(current_pos=auth.user.place)
            db(db.product_info.id == x).update(current_pos_level=auth.user.levelno)
            db(db.product_info.id == x).update(product_status=1)
            y=x+10000
            db(db.product_info.id == x).update(product_id=y)
            response.flash = 'Entry Created!!'
            redirect(URL('home'))
        elif form.errors:
            response.flash = 'Error in Data !!'
        return dict(form=form)
    else:
        redirect(URL('index'))

def profile():
    if not auth.user:
        redirect(URL('index'))
    record = db.auth_user(auth.user.id)
    db.auth_user.id.writable = False
    form = SQLFORM(db.auth_user, record,fields=["first_name","last_name","email","gender","birth_date","phoneno"])
    if form.process().accepted:
       response.flash = 'Details Updated !!'
       redirect(URL('../../default/home'))
    elif form.errors:
       response.flash = 'Error in Data !!'
    return dict(form=form)
        
def user():
    """
    exposes:
    http://..../[app]/default/user/login
    http://..../[app]/default/user/logout
    http://..../[app]/default/user/register
    http://..../[app]/default/user/profile
    http://..../[app]/default/user/retrieve_password
    http://..../[app]/default/user/change_password
    http://..../[app]/default/user/manage_users (requires membership in
    use @auth.requires_login()
        @auth.requires_membership('group name')
        @auth.requires_permission('read','table name',record_id)
    to decorate functions that need access control
    """
    form=auth()
    message=request.args(0)
    if auth.user and message=="login":
        redirect(URL('home'))
    elif auth.user or message=="login" or message=="register" or message=="request_reset_password" or message=="reset_password":
        return dict(form=auth(),message=request.args(0))
    else:
        redirect(URL('index'))

@cache.action()
def download():
    """
    allows downloading of uploaded files
    http://..../[app]/default/download/[filename]
    """
    return response.download(request, db)


def call():
    """
    exposes services. for example:
    http://..../[app]/default/call/jsonrpc
    decorate with @services.jsonrpc the functions to expose
    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv
    """
    return service()


@auth.requires_signature()
def data():
    """
    http://..../[app]/default/data/tables
    http://..../[app]/default/data/create/[table]
    http://..../[app]/default/data/read/[table]/[id]
    http://..../[app]/default/data/update/[table]/[id]
    http://..../[app]/default/data/delete/[table]/[id]
    http://..../[app]/default/data/select/[table]
    http://..../[app]/default/data/search/[table]
    but URLs must be signed, i.e. linked with
      A('table',_href=URL('data/tables',user_signature=True))
    or with the signed load operator
      LOAD('default','data.load',args='tables',ajax=True,user_signature=True)
    """
    return dict(form=crud())
